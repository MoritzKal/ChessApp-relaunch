#!/usr/bin/env node
/**
 * Generate a clean repository map (depth ≤ 3) and write to codex-context/REPO_MAP.md
 * Ignores: .git, node_modules, target, dist
 */
import fs from 'fs';
import path from 'path';

const ROOT = process.cwd();
const OUT_DIR = path.join(ROOT, 'codex-context');
const OUT_FILE = path.join(OUT_DIR, 'REPO_MAP.md');

const IGNORES = new Set(['.git', 'node_modules', 'target', 'dist']);

function isIgnored(name) {
  return IGNORES.has(name);
}

function listDir(dir, depth = 0, maxDepth = 3) {
  if (depth > maxDepth) return [];
  let entries = [];
  try {
    entries = fs.readdirSync(dir, { withFileTypes: true });
  } catch {
    return [];
  }
  // stable order: folders first, then files
  entries.sort((a, b) => (a.isDirectory() === b.isDirectory() ? a.name.localeCompare(b.name) : a.isDirectory() ? -1 : 1));

  const lines = [];
  for (const e of entries) {
    if (isIgnored(e.name)) continue;
    if (e.name.startsWith('.DS_Store')) continue;
    const p = path.join(dir, e.name);
    const prefix = '│  '.repeat(Math.max(0, depth - 1));
    const nodePrefix = depth === 0 ? './' : '';
    if (depth === 0) {
      // show root as ./
      lines.push(`${nodePrefix}`);
    }
    const branch = depth > 0 ? `${prefix}├─ ${e.name}` : `${nodePrefix}${e.name}/`;
    if (e.isDirectory()) {
      lines.push(depth > 0 ? branch : `├─ ${e.name}/`);
      if (depth + 1 <= maxDepth) {
        const kids = listDir(p, depth + 1, maxDepth);
        for (const k of kids) lines.push(k);
      }
    } else {
      lines.push(depth > 0 ? branch : `├─ ${e.name}`);
    }
  }
  return lines;
}

function buildMap() {
  const lines = [];
  lines.push('ChessApp‑relaunch — Repository Map (depth ≤ 3)');
  lines.push('');
  lines.push('Generated by scripts/generate-repo-map.mjs.');
  lines.push('');
  lines.push(...listDir(ROOT, 0, 3));
  lines.push('');
  lines.push('Note: Folders like .git, node_modules, target, dist are omitted.');
  return lines.join('\n');
}

fs.mkdirSync(OUT_DIR, { recursive: true });
fs.writeFileSync(OUT_FILE, buildMap(), 'utf8');
console.log(`Wrote ${path.relative(ROOT, OUT_FILE)}`);

