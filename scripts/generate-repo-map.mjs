#!/usr/bin/env node
/**
 * Generate a clean repository map (depth ≤ 3) and write to codex-context/REPO_MAP.md
 * Ignores: .git, node_modules, target, dist
 */
import fs from 'fs';
import path from 'path';

const ROOT = process.cwd();
const OUT_DIR = path.join(ROOT, 'codex-context');
const OUT_FILE = path.join(OUT_DIR, 'REPO_MAP.md');

const IGNORES = new Set(['.git', 'node_modules', 'target', 'dist']);

function isIgnored(name) {
  return IGNORES.has(name);
}

function listTree(dir, depth, maxDepth, prefix = '') {
  if (depth > maxDepth) return [];
  let entries;
  try {
    entries = fs.readdirSync(dir, { withFileTypes: true });
  } catch {
    return [];
  }
  entries = entries
    .filter((e) => !isIgnored(e.name) && !e.name.startsWith('.DS_Store'))
    .sort((a, b) => (a.isDirectory() === b.isDirectory() ? a.name.localeCompare(b.name) : a.isDirectory() ? -1 : 1));

  const lines = [];
  for (const e of entries) {
    const p = path.join(dir, e.name);
    const label = `${prefix}├─ ${e.name}${e.isDirectory() ? '' : ''}`;
    lines.push(label);
    if (e.isDirectory() && depth < maxDepth) {
      lines.push(...listTree(p, depth + 1, maxDepth, prefix + '│  '));
    }
  }
  return lines;
}

function buildMap() {
  const lines = [];
  lines.push('ChessApp‑relaunch — Repository Map (depth ≤ 5)');
  lines.push('');
  lines.push('Generated by scripts/generate-repo-map.mjs.');
  lines.push('');
  lines.push('./');
  lines.push(...listTree(ROOT, 1, 3));
  lines.push('');
  lines.push('Note: Folders like .git, node_modules, target, dist are omitted.');
  return lines.join('\n');
}

fs.mkdirSync(OUT_DIR, { recursive: true });
fs.writeFileSync(OUT_FILE, buildMap(), 'utf8');
console.log(`Wrote ${path.relative(ROOT, OUT_FILE)}`);
